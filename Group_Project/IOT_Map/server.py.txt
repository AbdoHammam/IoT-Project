import socket, sys
import threading
import time
import mraa
import json
import math
TCP_IP = '192.168.1.107' # your ip

TCP_PORTS = [5001,5002,5003,5004,5005,5006,5007,5008,5050]

BUFFER_SIZE = 1024
l1=[]
l2=[]
l1.append(0)
l1.append(0)
l2.append(0)
l2.append(0)


class listen_to_port(threading.Thread):

    def __init__(self,thread_name,ip,port_number,buffer_size):
                threading.Thread.__init__(self)
                self.thread_name=thread_name
                self.ip=ip
                self.port_number=port_number
                self.buffer_size=buffer_size


    def getDistance(self,x1, y1, x2, y2):
        return ((x1-x2)**2 + (y1-y2)**2)**0.5

    def run(self):
        print("opening thread: "+self.thread_name)

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        s.bind((self.ip, self.port_number))

        s.listen(1)

        while 1:
                conn, addr = s.accept()
                print ('Connection address:', addr)
                x1=x2=y1=z1=y2=z2=0.0

                while 1:
                        data = conn.recv(self.buffer_size)
                        # print ("received data:", data)
                        #gpio_1 = mraa.Gpio(7)
                        #gpio_1 = mraa.Gpio(int(data[5]))

                        #gpio_1.dir(mraa.DIR_OUT)

                        if data.find("on") != -1:
                                current_status = 1
                        else:
                                current_status = 0
                        #gpio_1.write(current_status)
                        print ("received data:", data)

                        x, y, z = self.parseJson(data)
                        #print x
                        if x == 1:
                                print "ff"
                                x1=x
                                l1[0]=y
                                l1[1]=z
                        if x == 2:
                                print "gg"
                                x2=x
                                l2[0]=y
                                l2[1]=z
                        #c = math.sqrt((l1[0] - l2[0])**2 + (l1[1] - l2[1])**2)
                        dlon = l2[1] - l1[1]
                        dlat = l2[0] - l1[0]
                        a = math.sin(dlat /2 )**2 + math.cos(l1[0]) * math.cos(l2[0]) * math.sin(dlon /2)**2
                        c = 2* math.atan2(math.sqrt(a), math.sqrt(1-a))

                        c = 6373.0 * c

                        print l1[0] , l1[1] ,l2[0] , l2[1]
                        print('distance is : ', c)

                        #print('board number is : ', x)
	#print('latitude is : ', y)
                        #print('longitude is : ', z)
                        # if data == 'close':
                              # break
                conn.close()
        s.close()
        s = none


    def parseJson(self, json):
        json = str(json).split('\n')
        json = json[0]
        x, y, z = str(json).split(',')
        x = int(x[x.find(':')+1:])
        y = float(y[y.find(':')+1:])
        z = float(z[z.find(':')+1:-2])
        return  x, y, z



for port_number in TCP_PORTS:
    try:
        thread =listen_to_port("Thread"+str(port_number),TCP_IP,port_number,BUFFER_SIZE)
        thread.start()
    except:
        print("problem in starting thread")

